// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name Luckieverse
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import Combine
import Foundation
@_exported import Luckieverse
import Observation
import OpenBiddingHelper
import SafariServices
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Swift.UInt64 {
  public static func nanoSeconds(from seconds: Swift.Int) -> Swift.UInt64
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency public func getCurrentViewController(base: UIKit.UIViewController? = {
        if #available(iOS 15.0, *) {
            return UIApplication.shared.connectedScenes
                .compactMap { $0 as? UIWindowScene }
                .flatMap { $0.windows }
                .first { $0.isKeyWindow }?.rootViewController
        } else {
            return UIApplication.shared.windows.first { $0.isKeyWindow }?.rootViewController
        }
    }()) -> UIKit.UIViewController?
}
@_Concurrency.MainActor @preconcurrency public struct LuckieverseFloatingButton : SwiftUI.UIViewControllerRepresentable {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeUIViewController(context: Luckieverse.LuckieverseFloatingButton.Context) -> UIKit.UIViewController
  @_Concurrency.MainActor @preconcurrency public func updateUIViewController(_ uiViewController: UIKit.UIViewController, context: Luckieverse.LuckieverseFloatingButton.Context)
  @_Concurrency.MainActor @preconcurrency public static func dismantleUIViewController(_ uiViewController: UIKit.UIViewController, coordinator: ())
  public typealias Body = Swift.Never
  public typealias Coordinator = ()
  public typealias UIViewControllerType = UIKit.UIViewController
}
@objc @available(iOS 17.0, *)
public class InterstitialAd : ObjectiveC.NSObject, OpenBiddingHelper.BIDMADOpenBiddingInterstitialDelegate {
  public var isLoaded: Swift.Bool {
    get
    set
    _modify
  }
  public var cancellable: Combine.AnyCancellable? {
    get
    set
    _modify
  }
  public var isRewarded: Swift.Bool {
    get
    set
    _modify
  }
  public var adClosureHandler: (() -> Swift.Void)? {
    get
    set
    _modify
  }
  public init(_ zoneId: Swift.String)
  public func show(_ adClosureHandler: (() -> Swift.Void)? = nil)
  @objc public func onLoadAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingInterstitial)
  @objc public func onLoadFailAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingInterstitial, error: any Swift.Error)
  @objc public func onCloseAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingInterstitial)
  @objc deinit
}
@available(iOS 17.0, *)
extension Luckieverse.InterstitialAd : Observation.Observable {
}
@available(iOS 13.0, *)
@_Concurrency.MainActor @preconcurrency public struct BannerAdView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public let zoneId: Swift.String
  @_Concurrency.MainActor @preconcurrency public init(zoneId: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: Luckieverse.BannerAdView.Context) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> Luckieverse.BannerAdView.Coordinator
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: UIKit.UIView, context: Luckieverse.BannerAdView.Context)
  @objc public class Coordinator : ObjectiveC.NSObject, OpenBiddingHelper.BIDMADOpenBiddingBannerDelegate {
    final public let ad: OpenBiddingHelper.BidmadBannerAd
    final public let view: UIKit.UIView
    public var cancellable: Combine.AnyCancellable?
    public init(_ zoneId: Swift.String)
    public func loadAd()
    @objc public func onLoadAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingBanner)
    @objc public func onLoadFailAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingBanner, error: any Swift.Error)
    @objc deinit
  }
  @available(iOS 13.0, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, *)
  public typealias UIViewType = UIKit.UIView
}
@objc @available(iOS 17.0, *)
public class RewardAd : ObjectiveC.NSObject, OpenBiddingHelper.BIDMADOpenBiddingRewardVideoDelegate {
  public var isLoaded: Swift.Bool {
    get
    set
    _modify
  }
  public var cancellable: Combine.AnyCancellable? {
    get
    set
    _modify
  }
  public var isRewarded: Swift.Bool {
    get
    set
    _modify
  }
  public var adClosureHandler: ((Swift.Bool) -> Swift.Void)? {
    get
    set
    _modify
  }
  public init(_ zoneId: Swift.String)
  public func show(_ adClosureHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func onLoadAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingRewardVideo)
  @objc public func onLoadFailAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingRewardVideo, error: any Swift.Error)
  @objc public func onSkipAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingRewardVideo)
  @objc public func onCompleteAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingRewardVideo)
  @objc public func onCloseAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingRewardVideo)
  @objc deinit
}
@available(iOS 17.0, *)
extension Luckieverse.RewardAd : Observation.Observable {
}
@objc @_inheritsConvenienceInitializers @objcMembers public class FloatingButtonManager : ObjectiveC.NSObject {
  @objc public static let shared: Luckieverse.FloatingButtonManager
  @objc public func showFloatingButton(on viewController: UIKit.UIViewController)
  @objc public func hideFloatingButton()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class LuckieverseSDK : ObjectiveC.NSObject {
  @objc public static let shared: Luckieverse.LuckieverseSDK
  @objc public func setFloatingButton(viewController: UIKit.UIViewController, show: Swift.Bool)
  @objc public func setFullScreenAdZoneIdForSaju(_ zoneId: Swift.String)
  @objc public func setFullScreenAdZoneIdForNotSaju(_ zoneId: Swift.String)
  @objc public func setFullScreenAdZoneIdForFortuneCookie(_ zoneId: Swift.String)
  @objc public func setBannerAdZoneIdForSaju(_ zoneId: Swift.String)
  @objc public func setBannerAdZoneIdForNotSaju(_ zoneId: Swift.String)
  @objc public func setBannerAdZoneIdForFortuneCookie(_ zoneId: Swift.String)
  @objc public static var sdkVersion: Swift.String
  @objc deinit
  @objc public func initialize()
  @objc public func updateUSER_ID(userId: Swift.String)
  @objc public func updateIDFA(IDFA: Swift.String)
  @objc public func updateAPP_KEY(APP_KEY: Swift.String)
  @objc public func setGoToSettingObjc(_ callback: @escaping @convention(block) () -> Swift.Void)
  @objc public func setGoToSettingSwift(_ callback: @escaping () -> Swift.Void)
  @objc public func openLuckieverseMain()
  @objc public func openLuckieverseByPush(pushKey: Swift.String)
  @objc public func openLuckieverseMyPage()
  @objc public func openLuckieverseSajuInfo()
  @objc public func openLuckieversePhoneAuth()
  @objc public func openLuckieversePointHistory()
  @objc public func openLuckieverseProductHistory()
  @objc public func openLuckieverseProductHistoryDetail(id: Swift.String)
  @objc public func openLuckieverseFaq()
  @objc public func openLuckieverseFaqDetail(id: Swift.String)
  @objc public func openLuckieverseInquiry()
  @objc public func openLuckieverseInquiryHistory()
  @objc public func openLuckieverseInquiryHistoryDetail(id: Swift.String)
  @objc public func openLuckieverseTermsAndPolicies()
  @objc public func openLuckieverseTermsAndPoliciesDetail(id: Swift.String)
  @objc public func openLuckieverseProductStore()
  @objc public func openLuckieverseProductStoreDetail()
  @objc public func openLuckieverseError()
  @objc public func setLuckieverseLocalPush(push: Luckieverse.LuckieverseLocalPush)
  @objc public func cancelLuckieverseLocalPush(pushType: Luckieverse.LuckieverseLocalPushType)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LuckieverseLocalPush : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(title: Swift.String, body: Swift.String, type: Luckieverse.LuckieverseLocalPushType, repeats: Swift.Bool = false, sound: UserNotifications.UNNotificationSound = .default, interverInSeconds: Swift.Int = 5)
  @objc deinit
}
@objc(LuckieverseLocalPushType) public enum LuckieverseLocalPushType : Swift.Int {
  case MAIN = 876663
  case MY = 876664
  case SAJU_INFO = 876665
  case PHONE_AUTH = 876666
  case POINT_HISTORY = 876667
  case PRODUCT_HISTORY = 876668
  case PRODUCT_HISTORY_DETAIL = 876669
  case FAQ = 876670
  case FAQ_DETAIL = 876671
  case INQUIRY = 876672
  case INQUIRY_HISTORY = 876673
  case INQUIRY_HISTORY_DETAIL = 876674
  case TERMS_AND_POLICIES = 876675
  case TERMS_AND_POLICIES_DETAIL = 876676
  case PRODUCT_STORE = 876677
  case PRODUCT_STORE_DETAIL = 876678
  case ERROR = 876679
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Luckieverse.LuckieverseFloatingButton : Swift.Sendable {}
@available(iOS 13.0, *)
extension Luckieverse.BannerAdView : Swift.Sendable {}
extension Luckieverse.LuckieverseLocalPushType : Swift.Equatable {}
extension Luckieverse.LuckieverseLocalPushType : Swift.Hashable {}
extension Luckieverse.LuckieverseLocalPushType : Swift.RawRepresentable {}
