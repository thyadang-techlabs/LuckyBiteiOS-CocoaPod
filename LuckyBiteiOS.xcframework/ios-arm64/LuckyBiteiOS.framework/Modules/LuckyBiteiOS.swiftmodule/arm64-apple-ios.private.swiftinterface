// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios18.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name LuckyBiteiOS
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import Combine
import Foundation
@_exported import LuckyBiteiOS
import Observation
import OpenBiddingHelper
import SafariServices
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class LuckyBiteSDKAdManager : ObjectiveC.NSObject {
  @objc public static let shared: LuckyBiteiOS.LuckyBiteSDKAdManager
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct LuckyBiteFloatingButton : SwiftUI.UIViewControllerRepresentable {
  @_Concurrency.MainActor @preconcurrency public init()
  @_Concurrency.MainActor @preconcurrency public func makeUIViewController(context: LuckyBiteiOS.LuckyBiteFloatingButton.Context) -> UIKit.UIViewController
  @_Concurrency.MainActor @preconcurrency public func updateUIViewController(_ uiViewController: UIKit.UIViewController, context: LuckyBiteiOS.LuckyBiteFloatingButton.Context)
  @_Concurrency.MainActor @preconcurrency public static func dismantleUIViewController(_ uiViewController: UIKit.UIViewController, coordinator: ())
  public typealias Body = Swift.Never
  public typealias Coordinator = ()
  public typealias UIViewControllerType = UIKit.UIViewController
}
extension Swift.UInt64 {
  public static func nanoSeconds(from seconds: Swift.Int) -> Swift.UInt64
}
@available(iOS 13.0, *)
@_Concurrency.MainActor @preconcurrency public struct BannerAdView : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public let zoneId: Swift.String
  @_Concurrency.MainActor @preconcurrency public init(zoneId: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: LuckyBiteiOS.BannerAdView.Context) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> LuckyBiteiOS.BannerAdView.Coordinator
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: UIKit.UIView, context: LuckyBiteiOS.BannerAdView.Context)
  @objc public class Coordinator : ObjectiveC.NSObject, OpenBiddingHelper.BIDMADOpenBiddingBannerDelegate {
    final public let ad: OpenBiddingHelper.BidmadBannerAd
    final public let view: UIKit.UIView
    public var cancellable: Combine.AnyCancellable?
    public init(_ zoneId: Swift.String)
    public func loadAd()
    @objc public func onLoadAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingBanner)
    @objc public func onLoadFailAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingBanner, error: any Swift.Error)
    @objc deinit
  }
  @available(iOS 13.0, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, *)
  public typealias UIViewType = UIKit.UIView
}
@objc @available(iOS 13.0, *)
public class InterstitialAd : ObjectiveC.NSObject, OpenBiddingHelper.BIDMADOpenBiddingInterstitialDelegate {
  public var isLoaded: Swift.Bool {
    get
    set
    _modify
  }
  public var cancellable: Combine.AnyCancellable? {
    get
    set
    _modify
  }
  public var isRewarded: Swift.Bool {
    get
    set
    _modify
  }
  public var adClosureHandler: (() -> Swift.Void)? {
    get
    set
    _modify
  }
  public init(_ zoneId: Swift.String)
  public func show(_ adClosureHandler: (() -> Swift.Void)? = nil)
  @objc public func onLoadAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingInterstitial)
  @objc public func onLoadFailAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingInterstitial, error: any Swift.Error)
  @objc public func onCloseAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingInterstitial)
  @objc deinit
}
@available(iOS 13.0, *)
extension LuckyBiteiOS.InterstitialAd : Observation.Observable {
}
@objc @_inheritsConvenienceInitializers @objcMembers public class LuckyBiteSDK : ObjectiveC.NSObject {
  @objc public static let shared: LuckyBiteiOS.LuckyBiteSDK
  @objc override dynamic public init()
  @objc public func setFloatingButton(viewController: UIKit.UIViewController, show: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class FloatingButtonManager : ObjectiveC.NSObject {
  @objc public static let shared: LuckyBiteiOS.FloatingButtonManager
  @objc(showFloatingButtonOnViewController:) public func showFloatingButton(on viewController: UIKit.UIViewController)
  @objc(hideFloatingButton) public func hideFloatingButton()
  @objc(showWebViewWithURL:onViewController:) public func showWebView(url: Swift.String, on viewController: UIKit.UIViewController)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class FullScreenWebViewController : UIKit.UIViewController, WebKit.WKNavigationDelegate, WebKit.WKScriptMessageHandler {
  @objc @_Concurrency.MainActor @preconcurrency public var webView: WebKit.WKWebView! {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor @preconcurrency @objc public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency public func getCurrentViewController(base: UIKit.UIViewController? = UIApplication.shared.connectedScenes
        .compactMap { ($0 as? UIWindowScene)?.keyWindow }
        .first?.rootViewController) -> UIKit.UIViewController?
}
@objc @available(iOS 13.0, *)
public class RewardAd : ObjectiveC.NSObject, OpenBiddingHelper.BIDMADOpenBiddingRewardVideoDelegate {
  public var isLoaded: Swift.Bool {
    get
    set
    _modify
  }
  public var cancellable: Combine.AnyCancellable? {
    get
    set
    _modify
  }
  public var isRewarded: Swift.Bool {
    get
    set
    _modify
  }
  public var adClosureHandler: ((Swift.Bool) -> Swift.Void)? {
    get
    set
    _modify
  }
  public init(_ zoneId: Swift.String)
  public func show(_ adClosureHandler: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func onLoadAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingRewardVideo)
  @objc public func onLoadFailAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingRewardVideo, error: any Swift.Error)
  @objc public func onSkipAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingRewardVideo)
  @objc public func onCompleteAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingRewardVideo)
  @objc public func onCloseAd(_ bidmadAd: OpenBiddingHelper.OpenBiddingRewardVideo)
  @objc deinit
}
@available(iOS 13.0, *)
extension LuckyBiteiOS.RewardAd : Observation.Observable {
}
extension LuckyBiteiOS.LuckyBiteFloatingButton : Swift.Sendable {}
@available(iOS 13.0, *)
extension LuckyBiteiOS.BannerAdView : Swift.Sendable {}
